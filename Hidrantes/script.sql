create database hidrantes;
CREATE OR REPLACE FUNCTION CREA_TABLAS()
	RETURNS VOID
	AS $$
	BEGIN
		CREATE TABLE HIDRANTE(
			ID VARCHAR(30) NOT NULL,
			CAUDAL FLOAT NOT NULL,
			NUMERO_SALIDAS INT NOT NULL,
			TAMANO_SALIDAS VARCHAR(30) NOT NULL,
			ESTADO VARCHAR(30) NOT NULL,
			LONGITUD FLOAT NOT NULL,
			LATITUD FLOAT NOT NULL,
			CONSTRAINT PKHIDRANTE PRIMARY KEY (ID)
		);

		CREATE TABLE USUARIO(
			ID VARCHAR(30) NOT NULL,
			NOMBRE VARCHAR(30) NOT NULL,
			CONTRASENA VARCHAR(30) NOT NULL,
			DEPARTAMENTO VARCHAR(30) NOT NULL,
			CONSTRAINT PKBOMBERO PRIMARY KEY (ID)
		);

		CREATE TABLE INSPECCION_OCULAR(
			ID VARCHAR(30) NOT NULL,
			USUARIO VARCHAR(30) NOT NULL,
			FECHA DATE NOT NULL,
			CONSTRAINT PKINSPECCION_OCULAR PRIMARY KEY (ID),
			CONSTRAINT FKINSPECCION_OCULAR FOREIGN KEY (USUARIO) REFERENCES USUARIO (ID)
		);

		CREATE TABLE INSPECCION_HIDRANTE(
			INSPECCION_OCULAR VARCHAR(30) NOT NULL,
			HIDRANTE VARCHAR(30) NOT NULL,
			CONSTRAINT FK1INSPECCION_HIDRANTE FOREIGN KEY (INSPECCION_OCULAR) REFERENCES INSPECCION_OCULAR(ID),
			CONSTRAINT FK2INSPECCION_HIDRANTE FOREIGN KEY (HIDRANTE) REFERENCES HIDRANTE(ID)
		);

		CREATE TABLE FORMULARIO_TRABAJO_REALIZADO(
			HIDRANTE VARCHAR(30) NOT NULL,
			FECHA DATE NOT NULL,
			TIPO VARCHAR(30) NOT NULL,
			CONSTRAINT FKFORMULARIO FOREIGN KEY (HIDRANTE) REFERENCES HIDRANTE(ID)
		);
END;
	$$
	LANGUAGE 'plpgsql';
CREATE OR REPLACE FUNCTION INSERTAR_USUARIOS()
	RETURNS VOID 
	AS $$
	BEGIN
		INSERT INTO USUARIO VALUES ('111','PAOLA ZUNIGA','111','BOMBEROS');
		INSERT INTO USUARIO VALUES ('222','MARIO ALFARO','222','BOMBEROS');
		INSERT INTO USUARIO VALUES ('333','LUIS PEREZ','333','MUNICIPALIDAD');
		INSERT INTO USUARIO VALUES ('444','MELISSA HERNANDEZ','444','MUNICIPALIDAD');
	END;
	$$
	LANGUAGE 'plpgsql';

select * from crea_tablas();
select * from insertar_usuarios();

CREATE OR REPLACE FUNCTION FUNC_INSPECCION_HIDRANTE_INSERTAR(INS VARCHAR(30),HID VARCHAR(30))
	RETURNS void
	AS $$
	BEGIN
		IF EXISTS(SELECT INSPECCION_OCULAR.ID FROM INSPECCION_OCULAR WHERE INSPECCION_OCULAR.ID=INS) 
		THEN
			IF EXISTS(SELECT HIDRANTE.ID FROM HIDRANTE WHERE HIDRANTE.ID=HID) 
			THEN
				INSERT INTO INSPECCION_HIDRANTE VALUES (INS, HID);
			ELSE
				RAISE NOTICE 'HIDRANTE NO EXISTE';
			END IF;
		ELSE
			RAISE NOTICE 'INSPECCION_OCULAR NO EXISTE';

		END IF;
	END;
	$$
	LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION FUNC_INSPECCION_OCULAR_INSERTAR(IDS VARCHAR(30),USUA VARCHAR(30),FEC VARCHAR(30))
	RETURNS void
	AS $$
	BEGIN
		
			IF EXISTS(SELECT USUARIO.ID FROM USUARIO WHERE USUARIO.ID=IDS) 
			THEN
				INSERT INTO INSPECCION_OCULAR VALUES (IDS,USUA,FEC);
			ELSE
				RAISE NOTICE 'USUARIO NO EXISTE';
			END IF;
	END;
	$$
	LANGUAGE 'plpgsql';
	
CREATE OR REPLACE FUNCTION FUNC_HIDRANTE_INSERTAR(IDS VARCHAR(30),CAUD FLOAT,NUM INT,TAM VARCHAR(30), EST VARCHAR(30),LON FLOAT,LAT FLOAT)
	RETURNS void
	AS $$
	BEGIN
		
				INSERT INTO HIDRANTE VALUES (IDS,CAUD, NUM,TAM,EST,LON,LAT);
	END;
	$$
	LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION FUNC_USUARIO_INSERTAR(IDS VARCHAR(30),NOM VARCHAR(30),CON VARCHAR(30),DEP VARCHAR(30))
	RETURNS INT
	AS $$
	BEGIN
		IF EXISTS(SELECT ID FROM USUARIO WHERE ID=IDS) 
		THEN
			RAISE NOTICE 'USUARIO YA EXISTE';
			RETURN -1;
		ELSE
			INSERT INTO USUARIO VALUES (IDS,NOM,CON,DEP);
			RETURN 0;
		END IF;
	END;
	$$
	LANGUAGE 'plpgsql';
	
	CREATE OR REPLACE FUNCTION UPDATE_HIDRANTE() RETURNS TRIGGER 
AS $$
BEGIN
	IF (NEW.ESTADO!='Excelente' or NEW.ESTADO!='Regular' or NEW.ESTADO!='Deficiente')
	THEN
		RAISE NOTICE 'NO SE PUEDE MODIFICAR EL ESTADO';
		RETURN OLD;
		
	ELSE
		RETURN NEW;
	END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER UPDATE_HIDRANTE_TR
BEFORE UPDATE ON HIDRANTE
FOR EACH ROW
EXECUTE PROCEDURE UPDATE_HIDRANTE();

CREATE OR REPLACE FUNCTION FUNC_RPH(LON FLOAT,LAT FLOAT,RADIO FLOAT)
	RETURNS SETOF HIDRANTE
	AS $$
	BEGIN
		IF EXISTS(SELECT * FROM HIDRANTE WHERE LONGITUD<LON+RADIO AND LONGITUD>LON-RADIO AND LATITUD < LAT+RADIO AND LATITUD > LAT-RADIO) 
		THEN
			RETURN QUERY SELECT * FROM HIDRANTE WHERE LONGITUD<LON+RADIO AND LONGITUD>LON-RADIO AND LATITUD < LAT+RADIO AND LATITUD > LAT-RADIO;
		ELSE
			RAISE NOTICE 'NO EXISTEN HIDRANTES DENTRO DEL PARAMETRO';
			RETURN;
		END IF;
	END;
	$$
	LANGUAGE 'plpgsql';

